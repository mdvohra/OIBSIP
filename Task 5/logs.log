2023-04-09 00:59:00,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-04-09 00:59:00,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-04-09 00:59:00,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-04-09 00:59:00,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-04-09 00:59:00,701:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-04-09 01:00:50,251:INFO:PyCaret RegressionExperiment
2023-04-09 01:00:50,251:INFO:Logging name: reg-default-name
2023-04-09 01:00:50,251:INFO:ML Usecase: MLUsecase.REGRESSION
2023-04-09 01:00:50,251:INFO:version 3.0.0
2023-04-09 01:00:50,252:INFO:Initializing setup()
2023-04-09 01:00:50,252:INFO:self.USI: 1833
2023-04-09 01:00:50,253:INFO:self._variable_keys: {'fold_groups_param', 'fold_generator', 'y_test', 'seed', 'X_train', 'log_plots_param', 'target_param', 'y', 'memory', 'html_param', 'X_test', 'transform_target_param', 'X', 'fold_shuffle_param', '_ml_usecase', 'pipeline', 'data', 'n_jobs_param', 'gpu_param', 'y_train', 'idx', 'exp_id', 'exp_name_log', 'gpu_n_jobs_param', 'logging_param', '_available_plots', 'USI'}
2023-04-09 01:00:50,253:INFO:Checking environment
2023-04-09 01:00:50,253:INFO:python_version: 3.9.13
2023-04-09 01:00:50,253:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-04-09 01:00:50,253:INFO:machine: AMD64
2023-04-09 01:00:50,253:INFO:platform: Windows-10-10.0.22621-SP0
2023-04-09 01:00:50,253:INFO:Memory: svmem(total=16948453376, available=2789281792, percent=83.5, used=14159171584, free=2789281792)
2023-04-09 01:00:50,253:INFO:Physical Core: 8
2023-04-09 01:00:50,253:INFO:Logical Core: 16
2023-04-09 01:00:50,253:INFO:Checking libraries
2023-04-09 01:00:50,253:INFO:System:
2023-04-09 01:00:50,253:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-04-09 01:00:50,253:INFO:executable: C:\m_pf\anaconda\python.exe
2023-04-09 01:00:50,253:INFO:   machine: Windows-10-10.0.22621-SP0
2023-04-09 01:00:50,253:INFO:PyCaret required dependencies:
2023-04-09 01:00:50,253:INFO:                 pip: 22.2.2
2023-04-09 01:00:50,253:INFO:          setuptools: 60.10.0
2023-04-09 01:00:50,253:INFO:             pycaret: 3.0.0
2023-04-09 01:00:50,253:INFO:             IPython: 7.31.1
2023-04-09 01:00:50,253:INFO:          ipywidgets: 7.6.5
2023-04-09 01:00:50,253:INFO:                tqdm: 4.64.1
2023-04-09 01:00:50,253:INFO:               numpy: 1.21.5
2023-04-09 01:00:50,253:INFO:              pandas: 1.4.4
2023-04-09 01:00:50,253:INFO:              jinja2: 2.11.3
2023-04-09 01:00:50,253:INFO:               scipy: 1.9.1
2023-04-09 01:00:50,253:INFO:              joblib: 1.2.0
2023-04-09 01:00:50,253:INFO:             sklearn: 1.0.2
2023-04-09 01:00:50,253:INFO:                pyod: 1.0.9
2023-04-09 01:00:50,254:INFO:            imblearn: 0.10.1
2023-04-09 01:00:50,254:INFO:   category_encoders: 2.6.0
2023-04-09 01:00:50,254:INFO:            lightgbm: 3.3.5
2023-04-09 01:00:50,254:INFO:               numba: 0.55.1
2023-04-09 01:00:50,254:INFO:            requests: 2.28.1
2023-04-09 01:00:50,254:INFO:          matplotlib: 3.5.2
2023-04-09 01:00:50,254:INFO:          scikitplot: 0.3.7
2023-04-09 01:00:50,254:INFO:         yellowbrick: 1.5
2023-04-09 01:00:50,254:INFO:              plotly: 5.9.0
2023-04-09 01:00:50,254:INFO:             kaleido: 0.2.1
2023-04-09 01:00:50,254:INFO:         statsmodels: 0.13.2
2023-04-09 01:00:50,254:INFO:              sktime: 0.17.0
2023-04-09 01:00:50,254:INFO:               tbats: 1.1.2
2023-04-09 01:00:50,254:INFO:            pmdarima: 2.0.3
2023-04-09 01:00:50,254:INFO:              psutil: 5.9.0
2023-04-09 01:00:50,254:INFO:PyCaret optional dependencies:
2023-04-09 01:00:50,266:INFO:                shap: Not installed
2023-04-09 01:00:50,266:INFO:           interpret: Not installed
2023-04-09 01:00:50,267:INFO:                umap: Not installed
2023-04-09 01:00:50,267:INFO:    pandas_profiling: 4.1.2
2023-04-09 01:00:50,267:INFO:  explainerdashboard: Not installed
2023-04-09 01:00:50,267:INFO:             autoviz: 0.1.58
2023-04-09 01:00:50,267:INFO:           fairlearn: Not installed
2023-04-09 01:00:50,267:INFO:             xgboost: 1.7.3
2023-04-09 01:00:50,267:INFO:            catboost: Not installed
2023-04-09 01:00:50,267:INFO:              kmodes: Not installed
2023-04-09 01:00:50,267:INFO:             mlxtend: Not installed
2023-04-09 01:00:50,267:INFO:       statsforecast: Not installed
2023-04-09 01:00:50,267:INFO:        tune_sklearn: Not installed
2023-04-09 01:00:50,267:INFO:                 ray: Not installed
2023-04-09 01:00:50,267:INFO:            hyperopt: Not installed
2023-04-09 01:00:50,267:INFO:              optuna: Not installed
2023-04-09 01:00:50,267:INFO:               skopt: Not installed
2023-04-09 01:00:50,267:INFO:              mlflow: Not installed
2023-04-09 01:00:50,267:INFO:              gradio: Not installed
2023-04-09 01:00:50,267:INFO:             fastapi: Not installed
2023-04-09 01:00:50,267:INFO:             uvicorn: Not installed
2023-04-09 01:00:50,267:INFO:              m2cgen: Not installed
2023-04-09 01:00:50,267:INFO:           evidently: Not installed
2023-04-09 01:00:50,267:INFO:               fugue: Not installed
2023-04-09 01:00:50,267:INFO:           streamlit: 1.18.1
2023-04-09 01:00:50,267:INFO:             prophet: Not installed
2023-04-09 01:00:50,267:INFO:None
2023-04-09 01:00:50,267:INFO:Set up data.
2023-04-09 01:00:50,273:INFO:Set up train/test split.
2023-04-09 01:00:50,275:INFO:Set up index.
2023-04-09 01:00:50,275:INFO:Set up folding strategy.
2023-04-09 01:00:50,275:INFO:Assigning column types.
2023-04-09 01:00:50,277:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-04-09 01:00:50,277:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,277:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,277:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,333:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,355:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,355:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,402:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,402:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,402:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,450:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,481:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,481:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,481:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,481:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-04-09 01:00:50,481:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,481:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,533:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,560:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,560:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,560:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,560:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,607:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,638:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,638:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,638:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,638:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-04-09 01:00:50,638:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,685:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,716:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,716:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,716:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,732:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,764:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,795:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,795:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,795:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,795:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-04-09 01:00:50,842:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,874:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,874:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,874:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,921:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,955:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-04-09 01:00:50,955:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:50,955:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:50,955:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-04-09 01:00:50,999:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:51,034:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:51,034:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:51,078:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-04-09 01:00:51,109:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:51,109:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:51,109:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-04-09 01:00:51,197:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:51,197:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:51,280:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:51,282:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:51,286:INFO:Preparing preprocessing pipeline...
2023-04-09 01:00:51,286:INFO:Set up simple imputation.
2023-04-09 01:00:51,287:INFO:Set up column name cleaning.
2023-04-09 01:00:51,290:INFO:Finished creating preprocessing pipeline.
2023-04-09 01:00:51,305:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Moh\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Unnamed: 0', 'TV', 'Radio',
                                             'Newspaper'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2023-04-09 01:00:51,305:INFO:Creating final display dataframe.
2023-04-09 01:00:51,337:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Sales
2                   Target type        Regression
3           Original data shape          (200, 5)
4        Transformed data shape          (200, 5)
5   Transformed train set shape          (140, 5)
6    Transformed test set shape           (60, 5)
7              Numeric features                 4
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              1833
2023-04-09 01:00:51,417:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:51,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:51,500:INFO:Soft dependency imported: xgboost: 1.7.3
2023-04-09 01:00:51,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-04-09 01:00:51,500:INFO:setup() successfully completed in 1.25s...............
2023-04-09 01:00:51,535:INFO:Initializing compare_models()
2023-04-09 01:00:51,536:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-04-09 01:00:51,536:INFO:Checking exceptions
2023-04-09 01:00:51,538:INFO:Preparing display monitor
2023-04-09 01:00:51,562:INFO:Initializing Linear Regression
2023-04-09 01:00:51,562:INFO:Total runtime is 0.0 minutes
2023-04-09 01:00:51,562:INFO:SubProcess create_model() called ==================================
2023-04-09 01:00:51,562:INFO:Initializing create_model()
2023-04-09 01:00:51,562:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:00:51,562:INFO:Checking exceptions
2023-04-09 01:00:51,562:INFO:Importing libraries
2023-04-09 01:00:51,562:INFO:Copying training dataset
2023-04-09 01:00:51,568:INFO:Defining folds
2023-04-09 01:00:51,569:INFO:Declaring metric variables
2023-04-09 01:00:51,571:INFO:Importing untrained model
2023-04-09 01:00:51,573:INFO:Linear Regression Imported successfully
2023-04-09 01:00:51,575:INFO:Starting cross validation
2023-04-09 01:00:51,582:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:00:56,826:INFO:Calculating mean and std
2023-04-09 01:00:56,826:INFO:Creating metrics dataframe
2023-04-09 01:00:56,843:INFO:Uploading results into container
2023-04-09 01:00:56,843:INFO:Uploading model into container now
2023-04-09 01:00:56,843:INFO:_master_model_container: 1
2023-04-09 01:00:56,843:INFO:_display_container: 2
2023-04-09 01:00:56,843:INFO:LinearRegression(n_jobs=-1)
2023-04-09 01:00:56,843:INFO:create_model() successfully completed......................................
2023-04-09 01:00:57,040:INFO:SubProcess create_model() end ==================================
2023-04-09 01:00:57,040:INFO:Creating metrics dataframe
2023-04-09 01:00:57,043:INFO:Initializing Lasso Regression
2023-04-09 01:00:57,043:INFO:Total runtime is 0.09136228958765666 minutes
2023-04-09 01:00:57,043:INFO:SubProcess create_model() called ==================================
2023-04-09 01:00:57,043:INFO:Initializing create_model()
2023-04-09 01:00:57,043:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:00:57,043:INFO:Checking exceptions
2023-04-09 01:00:57,043:INFO:Importing libraries
2023-04-09 01:00:57,043:INFO:Copying training dataset
2023-04-09 01:00:57,054:INFO:Defining folds
2023-04-09 01:00:57,054:INFO:Declaring metric variables
2023-04-09 01:00:57,056:INFO:Importing untrained model
2023-04-09 01:00:57,059:INFO:Lasso Regression Imported successfully
2023-04-09 01:00:57,059:INFO:Starting cross validation
2023-04-09 01:00:57,065:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:00:58,980:INFO:Calculating mean and std
2023-04-09 01:00:58,980:INFO:Creating metrics dataframe
2023-04-09 01:00:58,980:INFO:Uploading results into container
2023-04-09 01:00:58,980:INFO:Uploading model into container now
2023-04-09 01:00:58,980:INFO:_master_model_container: 2
2023-04-09 01:00:58,980:INFO:_display_container: 2
2023-04-09 01:00:58,980:INFO:Lasso(random_state=123)
2023-04-09 01:00:58,980:INFO:create_model() successfully completed......................................
2023-04-09 01:00:59,110:INFO:SubProcess create_model() end ==================================
2023-04-09 01:00:59,110:INFO:Creating metrics dataframe
2023-04-09 01:00:59,126:INFO:Initializing Ridge Regression
2023-04-09 01:00:59,126:INFO:Total runtime is 0.12607010205586752 minutes
2023-04-09 01:00:59,126:INFO:SubProcess create_model() called ==================================
2023-04-09 01:00:59,126:INFO:Initializing create_model()
2023-04-09 01:00:59,126:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:00:59,126:INFO:Checking exceptions
2023-04-09 01:00:59,126:INFO:Importing libraries
2023-04-09 01:00:59,126:INFO:Copying training dataset
2023-04-09 01:00:59,136:INFO:Defining folds
2023-04-09 01:00:59,136:INFO:Declaring metric variables
2023-04-09 01:00:59,138:INFO:Importing untrained model
2023-04-09 01:00:59,140:INFO:Ridge Regression Imported successfully
2023-04-09 01:00:59,145:INFO:Starting cross validation
2023-04-09 01:00:59,146:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:00:59,281:INFO:Calculating mean and std
2023-04-09 01:00:59,281:INFO:Creating metrics dataframe
2023-04-09 01:00:59,281:INFO:Uploading results into container
2023-04-09 01:00:59,281:INFO:Uploading model into container now
2023-04-09 01:00:59,281:INFO:_master_model_container: 3
2023-04-09 01:00:59,281:INFO:_display_container: 2
2023-04-09 01:00:59,281:INFO:Ridge(random_state=123)
2023-04-09 01:00:59,281:INFO:create_model() successfully completed......................................
2023-04-09 01:00:59,406:INFO:SubProcess create_model() end ==================================
2023-04-09 01:00:59,406:INFO:Creating metrics dataframe
2023-04-09 01:00:59,406:INFO:Initializing Elastic Net
2023-04-09 01:00:59,406:INFO:Total runtime is 0.1307387113571167 minutes
2023-04-09 01:00:59,406:INFO:SubProcess create_model() called ==================================
2023-04-09 01:00:59,406:INFO:Initializing create_model()
2023-04-09 01:00:59,406:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:00:59,406:INFO:Checking exceptions
2023-04-09 01:00:59,406:INFO:Importing libraries
2023-04-09 01:00:59,406:INFO:Copying training dataset
2023-04-09 01:00:59,422:INFO:Defining folds
2023-04-09 01:00:59,422:INFO:Declaring metric variables
2023-04-09 01:00:59,424:INFO:Importing untrained model
2023-04-09 01:00:59,426:INFO:Elastic Net Imported successfully
2023-04-09 01:00:59,431:INFO:Starting cross validation
2023-04-09 01:00:59,431:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:00:59,560:INFO:Calculating mean and std
2023-04-09 01:00:59,560:INFO:Creating metrics dataframe
2023-04-09 01:00:59,560:INFO:Uploading results into container
2023-04-09 01:00:59,560:INFO:Uploading model into container now
2023-04-09 01:00:59,560:INFO:_master_model_container: 4
2023-04-09 01:00:59,560:INFO:_display_container: 2
2023-04-09 01:00:59,560:INFO:ElasticNet(random_state=123)
2023-04-09 01:00:59,560:INFO:create_model() successfully completed......................................
2023-04-09 01:00:59,671:INFO:SubProcess create_model() end ==================================
2023-04-09 01:00:59,671:INFO:Creating metrics dataframe
2023-04-09 01:00:59,687:INFO:Initializing Least Angle Regression
2023-04-09 01:00:59,687:INFO:Total runtime is 0.13541865746180218 minutes
2023-04-09 01:00:59,687:INFO:SubProcess create_model() called ==================================
2023-04-09 01:00:59,687:INFO:Initializing create_model()
2023-04-09 01:00:59,687:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:00:59,687:INFO:Checking exceptions
2023-04-09 01:00:59,687:INFO:Importing libraries
2023-04-09 01:00:59,687:INFO:Copying training dataset
2023-04-09 01:00:59,699:INFO:Defining folds
2023-04-09 01:00:59,699:INFO:Declaring metric variables
2023-04-09 01:00:59,701:INFO:Importing untrained model
2023-04-09 01:00:59,704:INFO:Least Angle Regression Imported successfully
2023-04-09 01:00:59,708:INFO:Starting cross validation
2023-04-09 01:00:59,709:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:00:59,791:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,792:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,793:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,793:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,795:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,806:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,820:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,826:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,826:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,845:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:00:59,858:INFO:Calculating mean and std
2023-04-09 01:00:59,858:INFO:Creating metrics dataframe
2023-04-09 01:00:59,858:INFO:Uploading results into container
2023-04-09 01:00:59,858:INFO:Uploading model into container now
2023-04-09 01:00:59,858:INFO:_master_model_container: 5
2023-04-09 01:00:59,858:INFO:_display_container: 2
2023-04-09 01:00:59,858:INFO:Lars(random_state=123)
2023-04-09 01:00:59,858:INFO:create_model() successfully completed......................................
2023-04-09 01:00:59,991:INFO:SubProcess create_model() end ==================================
2023-04-09 01:00:59,992:INFO:Creating metrics dataframe
2023-04-09 01:00:59,998:INFO:Initializing Lasso Least Angle Regression
2023-04-09 01:00:59,998:INFO:Total runtime is 0.14060577551523845 minutes
2023-04-09 01:01:00,001:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:00,001:INFO:Initializing create_model()
2023-04-09 01:01:00,001:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:00,001:INFO:Checking exceptions
2023-04-09 01:01:00,001:INFO:Importing libraries
2023-04-09 01:01:00,001:INFO:Copying training dataset
2023-04-09 01:01:00,004:INFO:Defining folds
2023-04-09 01:01:00,004:INFO:Declaring metric variables
2023-04-09 01:01:00,006:INFO:Importing untrained model
2023-04-09 01:01:00,010:INFO:Lasso Least Angle Regression Imported successfully
2023-04-09 01:01:00,016:INFO:Starting cross validation
2023-04-09 01:01:00,018:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:00,066:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,075:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,083:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,091:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,101:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,110:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,117:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,125:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,133:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,140:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-04-09 01:01:00,146:INFO:Calculating mean and std
2023-04-09 01:01:00,146:INFO:Creating metrics dataframe
2023-04-09 01:01:00,158:INFO:Uploading results into container
2023-04-09 01:01:00,161:INFO:Uploading model into container now
2023-04-09 01:01:00,161:INFO:_master_model_container: 6
2023-04-09 01:01:00,161:INFO:_display_container: 2
2023-04-09 01:01:00,162:INFO:LassoLars(random_state=123)
2023-04-09 01:01:00,162:INFO:create_model() successfully completed......................................
2023-04-09 01:01:00,265:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:00,265:INFO:Creating metrics dataframe
2023-04-09 01:01:00,281:INFO:Initializing Orthogonal Matching Pursuit
2023-04-09 01:01:00,281:INFO:Total runtime is 0.1453173319498698 minutes
2023-04-09 01:01:00,281:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:00,281:INFO:Initializing create_model()
2023-04-09 01:01:00,281:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:00,281:INFO:Checking exceptions
2023-04-09 01:01:00,281:INFO:Importing libraries
2023-04-09 01:01:00,281:INFO:Copying training dataset
2023-04-09 01:01:00,291:INFO:Defining folds
2023-04-09 01:01:00,291:INFO:Declaring metric variables
2023-04-09 01:01:00,293:INFO:Importing untrained model
2023-04-09 01:01:00,295:INFO:Orthogonal Matching Pursuit Imported successfully
2023-04-09 01:01:00,301:INFO:Starting cross validation
2023-04-09 01:01:00,302:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:00,343:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,351:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,354:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,354:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,370:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,386:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,386:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,405:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,406:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,406:WARNING:C:\m_pf\anaconda\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-04-09 01:01:00,421:INFO:Calculating mean and std
2023-04-09 01:01:00,421:INFO:Creating metrics dataframe
2023-04-09 01:01:00,436:INFO:Uploading results into container
2023-04-09 01:01:00,436:INFO:Uploading model into container now
2023-04-09 01:01:00,436:INFO:_master_model_container: 7
2023-04-09 01:01:00,436:INFO:_display_container: 2
2023-04-09 01:01:00,436:INFO:OrthogonalMatchingPursuit()
2023-04-09 01:01:00,436:INFO:create_model() successfully completed......................................
2023-04-09 01:01:00,553:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:00,553:INFO:Creating metrics dataframe
2023-04-09 01:01:00,560:INFO:Initializing Bayesian Ridge
2023-04-09 01:01:00,560:INFO:Total runtime is 0.14997631311416626 minutes
2023-04-09 01:01:00,562:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:00,562:INFO:Initializing create_model()
2023-04-09 01:01:00,562:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:00,562:INFO:Checking exceptions
2023-04-09 01:01:00,562:INFO:Importing libraries
2023-04-09 01:01:00,562:INFO:Copying training dataset
2023-04-09 01:01:00,565:INFO:Defining folds
2023-04-09 01:01:00,565:INFO:Declaring metric variables
2023-04-09 01:01:00,567:INFO:Importing untrained model
2023-04-09 01:01:00,569:INFO:Bayesian Ridge Imported successfully
2023-04-09 01:01:00,574:INFO:Starting cross validation
2023-04-09 01:01:00,575:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:00,713:INFO:Calculating mean and std
2023-04-09 01:01:00,713:INFO:Creating metrics dataframe
2023-04-09 01:01:00,713:INFO:Uploading results into container
2023-04-09 01:01:00,713:INFO:Uploading model into container now
2023-04-09 01:01:00,713:INFO:_master_model_container: 8
2023-04-09 01:01:00,713:INFO:_display_container: 2
2023-04-09 01:01:00,713:INFO:BayesianRidge()
2023-04-09 01:01:00,713:INFO:create_model() successfully completed......................................
2023-04-09 01:01:00,843:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:00,843:INFO:Creating metrics dataframe
2023-04-09 01:01:00,847:INFO:Initializing Passive Aggressive Regressor
2023-04-09 01:01:00,847:INFO:Total runtime is 0.15475531419118246 minutes
2023-04-09 01:01:00,847:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:00,847:INFO:Initializing create_model()
2023-04-09 01:01:00,847:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:00,847:INFO:Checking exceptions
2023-04-09 01:01:00,847:INFO:Importing libraries
2023-04-09 01:01:00,847:INFO:Copying training dataset
2023-04-09 01:01:00,856:INFO:Defining folds
2023-04-09 01:01:00,856:INFO:Declaring metric variables
2023-04-09 01:01:00,858:INFO:Importing untrained model
2023-04-09 01:01:00,861:INFO:Passive Aggressive Regressor Imported successfully
2023-04-09 01:01:00,867:INFO:Starting cross validation
2023-04-09 01:01:00,867:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:00,987:INFO:Calculating mean and std
2023-04-09 01:01:00,987:INFO:Creating metrics dataframe
2023-04-09 01:01:01,003:INFO:Uploading results into container
2023-04-09 01:01:01,003:INFO:Uploading model into container now
2023-04-09 01:01:01,003:INFO:_master_model_container: 9
2023-04-09 01:01:01,003:INFO:_display_container: 2
2023-04-09 01:01:01,003:INFO:PassiveAggressiveRegressor(random_state=123)
2023-04-09 01:01:01,003:INFO:create_model() successfully completed......................................
2023-04-09 01:01:01,123:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:01,123:INFO:Creating metrics dataframe
2023-04-09 01:01:01,123:INFO:Initializing Huber Regressor
2023-04-09 01:01:01,123:INFO:Total runtime is 0.15934970776240032 minutes
2023-04-09 01:01:01,123:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:01,123:INFO:Initializing create_model()
2023-04-09 01:01:01,137:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:01,137:INFO:Checking exceptions
2023-04-09 01:01:01,137:INFO:Importing libraries
2023-04-09 01:01:01,137:INFO:Copying training dataset
2023-04-09 01:01:01,139:INFO:Defining folds
2023-04-09 01:01:01,139:INFO:Declaring metric variables
2023-04-09 01:01:01,142:INFO:Importing untrained model
2023-04-09 01:01:01,145:INFO:Huber Regressor Imported successfully
2023-04-09 01:01:01,149:INFO:Starting cross validation
2023-04-09 01:01:01,150:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:01,280:INFO:Calculating mean and std
2023-04-09 01:01:01,280:INFO:Creating metrics dataframe
2023-04-09 01:01:01,296:INFO:Uploading results into container
2023-04-09 01:01:01,296:INFO:Uploading model into container now
2023-04-09 01:01:01,296:INFO:_master_model_container: 10
2023-04-09 01:01:01,296:INFO:_display_container: 2
2023-04-09 01:01:01,299:INFO:HuberRegressor()
2023-04-09 01:01:01,299:INFO:create_model() successfully completed......................................
2023-04-09 01:01:01,405:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:01,405:INFO:Creating metrics dataframe
2023-04-09 01:01:01,420:INFO:Initializing K Neighbors Regressor
2023-04-09 01:01:01,420:INFO:Total runtime is 0.16431481043497723 minutes
2023-04-09 01:01:01,420:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:01,420:INFO:Initializing create_model()
2023-04-09 01:01:01,420:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:01,420:INFO:Checking exceptions
2023-04-09 01:01:01,420:INFO:Importing libraries
2023-04-09 01:01:01,420:INFO:Copying training dataset
2023-04-09 01:01:01,425:INFO:Defining folds
2023-04-09 01:01:01,425:INFO:Declaring metric variables
2023-04-09 01:01:01,429:INFO:Importing untrained model
2023-04-09 01:01:01,430:INFO:K Neighbors Regressor Imported successfully
2023-04-09 01:01:01,435:INFO:Starting cross validation
2023-04-09 01:01:01,436:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:01,572:INFO:Calculating mean and std
2023-04-09 01:01:01,572:INFO:Creating metrics dataframe
2023-04-09 01:01:01,572:INFO:Uploading results into container
2023-04-09 01:01:01,572:INFO:Uploading model into container now
2023-04-09 01:01:01,572:INFO:_master_model_container: 11
2023-04-09 01:01:01,572:INFO:_display_container: 2
2023-04-09 01:01:01,572:INFO:KNeighborsRegressor(n_jobs=-1)
2023-04-09 01:01:01,572:INFO:create_model() successfully completed......................................
2023-04-09 01:01:01,689:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:01,689:INFO:Creating metrics dataframe
2023-04-09 01:01:01,704:INFO:Initializing Decision Tree Regressor
2023-04-09 01:01:01,704:INFO:Total runtime is 0.16904441118240357 minutes
2023-04-09 01:01:01,704:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:01,704:INFO:Initializing create_model()
2023-04-09 01:01:01,704:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:01,704:INFO:Checking exceptions
2023-04-09 01:01:01,704:INFO:Importing libraries
2023-04-09 01:01:01,704:INFO:Copying training dataset
2023-04-09 01:01:01,713:INFO:Defining folds
2023-04-09 01:01:01,713:INFO:Declaring metric variables
2023-04-09 01:01:01,715:INFO:Importing untrained model
2023-04-09 01:01:01,717:INFO:Decision Tree Regressor Imported successfully
2023-04-09 01:01:01,722:INFO:Starting cross validation
2023-04-09 01:01:01,723:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:01,859:INFO:Calculating mean and std
2023-04-09 01:01:01,859:INFO:Creating metrics dataframe
2023-04-09 01:01:01,859:INFO:Uploading results into container
2023-04-09 01:01:01,859:INFO:Uploading model into container now
2023-04-09 01:01:01,859:INFO:_master_model_container: 12
2023-04-09 01:01:01,859:INFO:_display_container: 2
2023-04-09 01:01:01,868:INFO:DecisionTreeRegressor(random_state=123)
2023-04-09 01:01:01,868:INFO:create_model() successfully completed......................................
2023-04-09 01:01:01,977:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:01,977:INFO:Creating metrics dataframe
2023-04-09 01:01:01,977:INFO:Initializing Random Forest Regressor
2023-04-09 01:01:01,977:INFO:Total runtime is 0.1735973636309306 minutes
2023-04-09 01:01:01,993:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:01,993:INFO:Initializing create_model()
2023-04-09 01:01:01,993:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:01,993:INFO:Checking exceptions
2023-04-09 01:01:01,993:INFO:Importing libraries
2023-04-09 01:01:01,993:INFO:Copying training dataset
2023-04-09 01:01:01,997:INFO:Defining folds
2023-04-09 01:01:01,998:INFO:Declaring metric variables
2023-04-09 01:01:02,000:INFO:Importing untrained model
2023-04-09 01:01:02,002:INFO:Random Forest Regressor Imported successfully
2023-04-09 01:01:02,006:INFO:Starting cross validation
2023-04-09 01:01:02,007:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:02,470:INFO:Calculating mean and std
2023-04-09 01:01:02,471:INFO:Creating metrics dataframe
2023-04-09 01:01:02,477:INFO:Uploading results into container
2023-04-09 01:01:02,477:INFO:Uploading model into container now
2023-04-09 01:01:02,477:INFO:_master_model_container: 13
2023-04-09 01:01:02,477:INFO:_display_container: 2
2023-04-09 01:01:02,477:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2023-04-09 01:01:02,477:INFO:create_model() successfully completed......................................
2023-04-09 01:01:02,644:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:02,644:INFO:Creating metrics dataframe
2023-04-09 01:01:02,652:INFO:Initializing Extra Trees Regressor
2023-04-09 01:01:02,652:INFO:Total runtime is 0.1848363717397054 minutes
2023-04-09 01:01:02,654:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:02,654:INFO:Initializing create_model()
2023-04-09 01:01:02,654:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:02,654:INFO:Checking exceptions
2023-04-09 01:01:02,654:INFO:Importing libraries
2023-04-09 01:01:02,654:INFO:Copying training dataset
2023-04-09 01:01:02,656:INFO:Defining folds
2023-04-09 01:01:02,656:INFO:Declaring metric variables
2023-04-09 01:01:02,659:INFO:Importing untrained model
2023-04-09 01:01:02,661:INFO:Extra Trees Regressor Imported successfully
2023-04-09 01:01:02,665:INFO:Starting cross validation
2023-04-09 01:01:02,666:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:03,067:INFO:Calculating mean and std
2023-04-09 01:01:03,067:INFO:Creating metrics dataframe
2023-04-09 01:01:03,084:INFO:Uploading results into container
2023-04-09 01:01:03,084:INFO:Uploading model into container now
2023-04-09 01:01:03,084:INFO:_master_model_container: 14
2023-04-09 01:01:03,084:INFO:_display_container: 2
2023-04-09 01:01:03,084:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-04-09 01:01:03,084:INFO:create_model() successfully completed......................................
2023-04-09 01:01:03,189:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:03,189:INFO:Creating metrics dataframe
2023-04-09 01:01:03,205:INFO:Initializing AdaBoost Regressor
2023-04-09 01:01:03,205:INFO:Total runtime is 0.19405478636423748 minutes
2023-04-09 01:01:03,205:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:03,205:INFO:Initializing create_model()
2023-04-09 01:01:03,205:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:03,205:INFO:Checking exceptions
2023-04-09 01:01:03,205:INFO:Importing libraries
2023-04-09 01:01:03,205:INFO:Copying training dataset
2023-04-09 01:01:03,213:INFO:Defining folds
2023-04-09 01:01:03,213:INFO:Declaring metric variables
2023-04-09 01:01:03,215:INFO:Importing untrained model
2023-04-09 01:01:03,217:INFO:AdaBoost Regressor Imported successfully
2023-04-09 01:01:03,223:INFO:Starting cross validation
2023-04-09 01:01:03,224:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:03,423:INFO:Calculating mean and std
2023-04-09 01:01:03,423:INFO:Creating metrics dataframe
2023-04-09 01:01:03,446:INFO:Uploading results into container
2023-04-09 01:01:03,446:INFO:Uploading model into container now
2023-04-09 01:01:03,447:INFO:_master_model_container: 15
2023-04-09 01:01:03,447:INFO:_display_container: 2
2023-04-09 01:01:03,447:INFO:AdaBoostRegressor(random_state=123)
2023-04-09 01:01:03,447:INFO:create_model() successfully completed......................................
2023-04-09 01:01:03,563:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:03,563:INFO:Creating metrics dataframe
2023-04-09 01:01:03,571:INFO:Initializing Gradient Boosting Regressor
2023-04-09 01:01:03,571:INFO:Total runtime is 0.2001499891281128 minutes
2023-04-09 01:01:03,573:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:03,573:INFO:Initializing create_model()
2023-04-09 01:01:03,573:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:03,573:INFO:Checking exceptions
2023-04-09 01:01:03,573:INFO:Importing libraries
2023-04-09 01:01:03,573:INFO:Copying training dataset
2023-04-09 01:01:03,576:INFO:Defining folds
2023-04-09 01:01:03,576:INFO:Declaring metric variables
2023-04-09 01:01:03,579:INFO:Importing untrained model
2023-04-09 01:01:03,581:INFO:Gradient Boosting Regressor Imported successfully
2023-04-09 01:01:03,586:INFO:Starting cross validation
2023-04-09 01:01:03,586:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:03,794:INFO:Calculating mean and std
2023-04-09 01:01:03,794:INFO:Creating metrics dataframe
2023-04-09 01:01:03,810:INFO:Uploading results into container
2023-04-09 01:01:03,810:INFO:Uploading model into container now
2023-04-09 01:01:03,810:INFO:_master_model_container: 16
2023-04-09 01:01:03,810:INFO:_display_container: 2
2023-04-09 01:01:03,810:INFO:GradientBoostingRegressor(random_state=123)
2023-04-09 01:01:03,810:INFO:create_model() successfully completed......................................
2023-04-09 01:01:03,918:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:03,918:INFO:Creating metrics dataframe
2023-04-09 01:01:03,933:INFO:Initializing Extreme Gradient Boosting
2023-04-09 01:01:03,933:INFO:Total runtime is 0.20619534254074098 minutes
2023-04-09 01:01:03,933:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:03,942:INFO:Initializing create_model()
2023-04-09 01:01:03,942:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:03,942:INFO:Checking exceptions
2023-04-09 01:01:03,942:INFO:Importing libraries
2023-04-09 01:01:03,942:INFO:Copying training dataset
2023-04-09 01:01:03,945:INFO:Defining folds
2023-04-09 01:01:03,945:INFO:Declaring metric variables
2023-04-09 01:01:03,947:INFO:Importing untrained model
2023-04-09 01:01:03,949:INFO:Extreme Gradient Boosting Imported successfully
2023-04-09 01:01:03,953:INFO:Starting cross validation
2023-04-09 01:01:03,953:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:04,176:INFO:Calculating mean and std
2023-04-09 01:01:04,176:INFO:Creating metrics dataframe
2023-04-09 01:01:04,193:INFO:Uploading results into container
2023-04-09 01:01:04,193:INFO:Uploading model into container now
2023-04-09 01:01:04,193:INFO:_master_model_container: 17
2023-04-09 01:01:04,193:INFO:_display_container: 2
2023-04-09 01:01:04,193:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=123, ...)
2023-04-09 01:01:04,193:INFO:create_model() successfully completed......................................
2023-04-09 01:01:04,297:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:04,297:INFO:Creating metrics dataframe
2023-04-09 01:01:04,312:INFO:Initializing Light Gradient Boosting Machine
2023-04-09 01:01:04,312:INFO:Total runtime is 0.21251085996627808 minutes
2023-04-09 01:01:04,312:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:04,312:INFO:Initializing create_model()
2023-04-09 01:01:04,312:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:04,312:INFO:Checking exceptions
2023-04-09 01:01:04,312:INFO:Importing libraries
2023-04-09 01:01:04,312:INFO:Copying training dataset
2023-04-09 01:01:04,324:INFO:Defining folds
2023-04-09 01:01:04,324:INFO:Declaring metric variables
2023-04-09 01:01:04,326:INFO:Importing untrained model
2023-04-09 01:01:04,328:INFO:Light Gradient Boosting Machine Imported successfully
2023-04-09 01:01:04,333:INFO:Starting cross validation
2023-04-09 01:01:04,333:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:05,199:INFO:Calculating mean and std
2023-04-09 01:01:05,199:INFO:Creating metrics dataframe
2023-04-09 01:01:05,222:INFO:Uploading results into container
2023-04-09 01:01:05,223:INFO:Uploading model into container now
2023-04-09 01:01:05,223:INFO:_master_model_container: 18
2023-04-09 01:01:05,223:INFO:_display_container: 2
2023-04-09 01:01:05,223:INFO:LGBMRegressor(random_state=123)
2023-04-09 01:01:05,223:INFO:create_model() successfully completed......................................
2023-04-09 01:01:05,334:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:05,334:INFO:Creating metrics dataframe
2023-04-09 01:01:05,334:INFO:Initializing Dummy Regressor
2023-04-09 01:01:05,334:INFO:Total runtime is 0.22954715490341188 minutes
2023-04-09 01:01:05,350:INFO:SubProcess create_model() called ==================================
2023-04-09 01:01:05,350:INFO:Initializing create_model()
2023-04-09 01:01:05,350:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238F370C0D0>, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:05,350:INFO:Checking exceptions
2023-04-09 01:01:05,350:INFO:Importing libraries
2023-04-09 01:01:05,350:INFO:Copying training dataset
2023-04-09 01:01:05,353:INFO:Defining folds
2023-04-09 01:01:05,353:INFO:Declaring metric variables
2023-04-09 01:01:05,356:INFO:Importing untrained model
2023-04-09 01:01:05,357:INFO:Dummy Regressor Imported successfully
2023-04-09 01:01:05,361:INFO:Starting cross validation
2023-04-09 01:01:05,362:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:05,502:INFO:Calculating mean and std
2023-04-09 01:01:05,502:INFO:Creating metrics dataframe
2023-04-09 01:01:05,513:INFO:Uploading results into container
2023-04-09 01:01:05,513:INFO:Uploading model into container now
2023-04-09 01:01:05,514:INFO:_master_model_container: 19
2023-04-09 01:01:05,514:INFO:_display_container: 2
2023-04-09 01:01:05,514:INFO:DummyRegressor()
2023-04-09 01:01:05,514:INFO:create_model() successfully completed......................................
2023-04-09 01:01:05,620:INFO:SubProcess create_model() end ==================================
2023-04-09 01:01:05,620:INFO:Creating metrics dataframe
2023-04-09 01:01:05,641:INFO:Initializing create_model()
2023-04-09 01:01:05,641:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:05,641:INFO:Checking exceptions
2023-04-09 01:01:05,641:INFO:Importing libraries
2023-04-09 01:01:05,641:INFO:Copying training dataset
2023-04-09 01:01:05,641:INFO:Defining folds
2023-04-09 01:01:05,641:INFO:Declaring metric variables
2023-04-09 01:01:05,641:INFO:Importing untrained model
2023-04-09 01:01:05,641:INFO:Declaring custom model
2023-04-09 01:01:05,641:INFO:Extra Trees Regressor Imported successfully
2023-04-09 01:01:05,641:INFO:Cross validation set to False
2023-04-09 01:01:05,641:INFO:Fitting Model
2023-04-09 01:01:05,708:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-04-09 01:01:05,708:INFO:create_model() successfully completed......................................
2023-04-09 01:01:05,853:INFO:_master_model_container: 19
2023-04-09 01:01:05,853:INFO:_display_container: 2
2023-04-09 01:01:05,853:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-04-09 01:01:05,853:INFO:compare_models() successfully completed......................................
2023-04-09 01:01:05,870:INFO:Initializing create_model()
2023-04-09 01:01:05,870:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=et, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-04-09 01:01:05,870:INFO:Checking exceptions
2023-04-09 01:01:05,891:INFO:Importing libraries
2023-04-09 01:01:05,891:INFO:Copying training dataset
2023-04-09 01:01:05,897:INFO:Defining folds
2023-04-09 01:01:05,897:INFO:Declaring metric variables
2023-04-09 01:01:05,903:INFO:Importing untrained model
2023-04-09 01:01:05,906:INFO:Extra Trees Regressor Imported successfully
2023-04-09 01:01:05,911:INFO:Starting cross validation
2023-04-09 01:01:05,913:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-04-09 01:01:06,324:INFO:Calculating mean and std
2023-04-09 01:01:06,324:INFO:Creating metrics dataframe
2023-04-09 01:01:06,328:INFO:Finalizing model
2023-04-09 01:01:06,394:INFO:Uploading results into container
2023-04-09 01:01:06,410:INFO:Uploading model into container now
2023-04-09 01:01:06,416:INFO:_master_model_container: 20
2023-04-09 01:01:06,416:INFO:_display_container: 3
2023-04-09 01:01:06,416:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-04-09 01:01:06,416:INFO:create_model() successfully completed......................................
2023-04-09 01:01:06,552:INFO:Initializing finalize_model()
2023-04-09 01:01:06,552:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=123), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2023-04-09 01:01:06,552:INFO:Finalizing ExtraTreesRegressor(n_jobs=-1, random_state=123)
2023-04-09 01:01:06,555:INFO:Initializing create_model()
2023-04-09 01:01:06,555:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=123), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, kwargs={})
2023-04-09 01:01:06,555:INFO:Checking exceptions
2023-04-09 01:01:06,557:INFO:Importing libraries
2023-04-09 01:01:06,557:INFO:Copying training dataset
2023-04-09 01:01:06,557:INFO:Defining folds
2023-04-09 01:01:06,557:INFO:Declaring metric variables
2023-04-09 01:01:06,557:INFO:Importing untrained model
2023-04-09 01:01:06,557:INFO:Declaring custom model
2023-04-09 01:01:06,557:INFO:Extra Trees Regressor Imported successfully
2023-04-09 01:01:06,557:INFO:Cross validation set to False
2023-04-09 01:01:06,557:INFO:Fitting Model
2023-04-09 01:01:06,635:INFO:Pipeline(memory=FastMemory(location=C:\Users\Moh\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Unnamed: 0', 'TV', 'Radio',
                                             'Newspaper'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))])
2023-04-09 01:01:06,635:INFO:create_model() successfully completed......................................
2023-04-09 01:01:06,734:INFO:_master_model_container: 20
2023-04-09 01:01:06,734:INFO:_display_container: 3
2023-04-09 01:01:06,750:INFO:Pipeline(memory=FastMemory(location=C:\Users\Moh\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Unnamed: 0', 'TV', 'Radio',
                                             'Newspaper'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))])
2023-04-09 01:01:06,750:INFO:finalize_model() successfully completed......................................
2023-04-09 01:01:06,871:INFO:Initializing predict_model()
2023-04-09 01:01:06,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238F358C6A0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Moh\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Unnamed: 0', 'TV', 'Radio',
                                             'Newspaper'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x00000238F3ADB040>)
2023-04-09 01:01:06,876:INFO:Checking exceptions
2023-04-09 01:01:06,876:INFO:Preloading libraries
